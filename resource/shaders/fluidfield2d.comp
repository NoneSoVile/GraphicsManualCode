#version 430
layout (local_size_x = 32, local_size_y = 32) in;
// Output textures
layout(rgba32f, binding = 0) uniform image2D velocityTexture;
layout(binding = 1, rgba8ui) uniform uimage2D pressureTexture;
layout(binding = 2, rgba32f) uniform image2D densityTexture;

// Input buffer bindings
layout(std430, binding = 0) buffer VelocityBuffer {
    vec2 velocity[];
};

layout(std430, binding = 1) buffer PressureBuffer {
    vec2 pressure[];
};

layout(std430, binding = 2) buffer ParticleBuffer {
    vec2 markerParticles[];
};

// Grid dimensions
uniform int GRID_X_DIM;
uniform int GRID_Y_DIM;
uniform int PARTICLES_PER_GRID;

void main() {
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

    // 1. Velocity Visualization (velocity magnitude as color)
    if (coord.x <= GRID_X_DIM && coord.y <= GRID_Y_DIM) {
        int idx = coord.x + coord.y * (GRID_X_DIM + 1);
        vec2 vel = velocity[idx];
        float velMag = length(vel);
        velMag = velMag < 0.0 ? 0.0 : velMag;
        vec4 velColor = vec4(velMag, 0.0, 1.0 - velMag, 1.0);  // Color mapping (blue to red)
        imageStore(velocityTexture, coord, velColor);
    }

    // 2. Pressure Visualization (pressure magnitude as color)
    if (coord.x < GRID_X_DIM && coord.y < GRID_Y_DIM) {
        int idx = coord.x + coord.y * GRID_X_DIM;
        vec2 pres = pressure[idx];
        float presMag = length(pres);
        presMag = presMag < 0.0 ? 0.0 : presMag;
        uvec4 presColor = 255u*uvec4(presMag, presMag, 1.0 - presMag, 1.0);  // Color mapping (blue to yellow)
        imageStore(pressureTexture, coord, presColor);
    }

    // 3. Particle Density Visualization (density based on particle count in each cell)
    if (coord.x < GRID_X_DIM && coord.y < GRID_Y_DIM) {
        // Count particles in each cell for density estimation
        int particleCount = 5;
        int idx = coord.x + coord.y * GRID_X_DIM;
        vec2 density = markerParticles[idx];
        /*for (int i = 0; i < MARKER_PARTICLES; ++i) {
            ivec2 partCoord = ivec2(markerParticles[i]);
            if (partCoord == coord) {
                particleCount++;
            }
        }*/
        //float density = float(particleCount) / float(PARTICLES_PER_GRID);
        vec4 densityColor = vec4(density.x, density.y, 0.0, 1.0);  // Grayscale density map
        imageStore(densityTexture, coord, densityColor);
    }
}
